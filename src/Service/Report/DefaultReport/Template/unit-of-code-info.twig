{% extends "base.twig" %}

{% block head %}
    {{ parent() }}
    <script type="text/javascript">
        google.charts.load("current", {packages: ['corechart', 'bar']});
        google.charts.setOnLoadCallback(drawCharts);

        function drawCharts() {
            drawCharacteristicsChart();
        }

        function drawCharacteristicsChart() {
            var data = google.visualization.arrayToDataTable([
                ['Характеристика', 'Значение'],
                ['Примитивность', {{ primitiveness_rate }}],
                ['Неустойчивость', {{ instability_rate }}],
            ]);

            var options = {
                title: 'Характеристики',
                bars: 'horizontal',
                legend: { position: 'none' }
            };

            var chart = new google.visualization.BarChart(document.getElementById('characteristics-chart'));

            chart.draw(data, google.charts.Bar.convertOptions(options));
        }
    </script>
    <style>
        #graph {
            border: 1px solid mediumpurple;
            width: 100%;
            height: 500px;
        }
    </style>
{% endblock %}

{% block title %}
    {{ name }}
{% endblock %}

{% block header_title %}
    {{ name }}
{% endblock %}

{% block breadcrumb %}
    <li class="breadcrumb-item"><a href="index.html">Главная</a></li>
    <li class="breadcrumb-item"><a href="{{ component.uid }}.html">{{ component.name }}</a></li>
    <li class="breadcrumb-item active" aria-current="page">{{ name }}</li>
{% endblock %}

{% block main_container %}
    <div class="row">
        <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
            <ul style="margin-top: 10px;">
                <li>Компонент: <a href="{{ component.uid }}.html">{{ component.name }}</a></li>
                <li>Тип: {{ type }}</li>
                <li>Публичный: {{ is_public }}</li>
                <li>Абстрактный: {{ is_abstract }}</li>
                <li>Примитивность: {{ primitiveness_rate }}</li>
                <li>Неустойчивость: {{ instability_rate }}</li>
            </ul>
        </div>
        <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
            <div id="characteristics-chart"></div>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <b>Граф зависимостей</b> <i class="fa fa-refresh" title="перерисовать граф" style="cursor: pointer" onclick="redrawAll()"></i>
            <div id="graph"></div>
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
            <b>Исходящие зависимости</b>
            <table class="table table-borderless table-hover">
                {% for output_dependency in output_dependencies %}
                    <tr class="{% if not output_dependency.is_allowed and output_dependency.in_allowed_state %}alert-primary
                               {% elseif not output_dependency.is_allowed and not output_dependency.in_allowed_state %}alert-danger
                               {% endif %}">
                        <td>
                            {{ output_dependency.name }}
                            {% if output_dependency.uid is defined %}
                                <a href="{{ output_dependency.uid }}.html">подробнее</a>
                            {% endif %}
                        </td>
                    </tr>
                {% endfor %}
            </table>
        </div>
        <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
            <b>Входящие зависимости</b>
            <table class="table table-borderless table-hover">
                {% for input_dependency in input_dependencies %}
                    <tr class="{% if not input_dependency.is_allowed and input_dependency.in_allowed_state %}alert-primary
                               {% elseif not input_dependency.is_allowed and not input_dependency.in_allowed_state %}alert-danger
                               {% endif %}">
                        <td>
                            {{ input_dependency.name }}
                            {% if input_dependency.uid is defined %}
                                <a href="{{ input_dependency.uid }}.html">подробнее</a>
                            {% endif %}
                        </td>
                    </tr>
                {% endfor %}
            </table>
        </div>
    </div>

    <script type="text/javascript">
        var network;

        var nodes = new vis.DataSet();
        var edges = new vis.DataSet();

        function redrawAll() {
            nodes.clear();
            edges.clear();

            network = null;
            nodesData = {{ units_of_code_graph.nodes|raw }};
            edgesData = {{ units_of_code_graph.edges|raw }};

            nodes.add(nodesData);
            edges.add(edgesData);

            var container = document.getElementById('graph');
            var data = {
                nodes: nodes,
                edges: edges
            };
            var options = {
                nodes: {
                    shape: "box",
                },
                edges: {
                    arrows: 'to',
                },
            };

            network = new vis.Network(container, data, options);
            network.on("selectNode", function (params) {
                if (params.nodes.length === 1) {
                    if (network.isCluster(params.nodes[0]) === true) {
                        network.openCluster(params.nodes[0]);
                    }
                }
            });

            cluster();
        }

        function cluster() {
            var clusters = {{ units_of_code_graph.clusters|raw }};
            var clusterOptionsByData;
            for (var i = 0; i < clusters.length; i++) {
                var cluster = clusters[i];
                clusterOptionsByData = {
                    joinCondition: function (childOptions) {
                        return childOptions.cluster === cluster;
                    },
                    processProperties: function (clusterOptions, childNodes, childEdges) {
                        var totalMass = 0;
                        for (var i = 0; i < childNodes.length; i++) {
                            totalMass += childNodes[i].mass;
                        }
                        clusterOptions.mass = totalMass;
                        return clusterOptions;
                    },
                    clusterNodeProperties: {
                        id: "cluster:" + cluster,
                        borderWidth: 3,
                        shape: "circle",
                        label: cluster,
                    },
                };
                network.cluster(clusterOptionsByData);
            }
        }

        redrawAll();
    </script>
{% endblock %}
